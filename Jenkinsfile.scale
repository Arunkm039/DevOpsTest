pipeline {
    agent any
    parameters {
        choice(name: 'ENV', choices: ['dev', 'qa', 'int'], description: 'Choose target environment')
        choice(name: 'NAMESPACE', choices: ['ctad-dev-amp-core', 'ctad-qa-amp-core', 'ctad-int-amp-core'], description: 'Choose namespace')
        choice(name: 'ACTION', choices: ['Scale Up', 'Scale Down'], description: 'Choose scaling action')
        choice(name: 'DEPLOYMENT', choices: [
            'hotspot-api-${params.ENV}-dask-scheduler',
            'hotspot-api-worker',
            'hotspot-backend-manager',
            'hotspot-mq-scheduler',
            'hotspot-mqworker-maxaccumulation',
            'hotspot-mqworker-scenario',
            'hotspot-mqworker-visualization',
            'hotspot-api-dask-worker',
            'hotspot-mq-worker'
        ], description: 'Choose deployment to scale')
        string(name: 'REPLICAS', defaultValue: '1', description: 'Replica count for scaling up')
    }
    stages {
        stage('Scale Deployments') {
            steps {
                script {
                    // Define deployment replica counts
                    def deployments = [
                        'hotspot-api-dask-scheduler': 1,
                        'hotspot-api-worker': 1,
                        'hotspot-backend-manager': 1,
                        'hotspot-mq-scheduler': 1,
                        'hotspot-mqworker-maxaccumulation': 1,
                        'hotspot-mqworker-scenario': 1,
                        'hotspot-mqworker-visualization': 1,
                        'hotspot-api-dask-worker': 2,
                        'hotspot-mq-worker': 2
                    ]
                    
                    def replicas = (params.ACTION == 'Scale Up') ? params.REPLICAS : 0

                    echo "${params.ACTION} ${params.DEPLOYMENT} in ${params.ENV} environment to ${replicas} replicas..."
                    
                }
            }
        }
    }
}
